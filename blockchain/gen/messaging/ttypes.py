#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Status:
  NEW = 1
  PENDING = 2
  APPROVED = 3
  COMPLETE = 4

  _VALUES_TO_NAMES = {
    1: "NEW",
    2: "PENDING",
    3: "APPROVED",
    4: "COMPLETE",
  }

  _NAMES_TO_VALUES = {
    "NEW": 1,
    "PENDING": 2,
    "APPROVED": 3,
    "COMPLETE": 4,
  }


class VerificationSignature:
  """
  Attributes:
   - signature
   - signing_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'signature', None, None, ), # 1
    (2, TType.STRING, 'signing_hash', None, None, ), # 2
  )

  def __init__(self, signature=None, signing_hash=None,):
    self.signature = signature
    self.signing_hash = signing_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.signature = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.signing_hash = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VerificationSignature')
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 1)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.signing_hash is not None:
      oprot.writeFieldBegin('signing_hash', TType.STRING, 2)
      oprot.writeString(self.signing_hash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.signing_hash)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriorBlockHash:
  """
  Attributes:
   - hash
   - verification_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hash', None, None, ), # 1
    (2, TType.LIST, 'verification_ids', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, hash=None, verification_ids=None,):
    self.hash = hash
    self.verification_ids = verification_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.verification_ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.verification_ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriorBlockHash')
    if self.hash is not None:
      oprot.writeFieldBegin('hash', TType.STRING, 1)
      oprot.writeString(self.hash)
      oprot.writeFieldEnd()
    if self.verification_ids is not None:
      oprot.writeFieldBegin('verification_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.verification_ids))
      for iter6 in self.verification_ids:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hash)
    value = (value * 31) ^ hash(self.verification_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Verification:
  """
  Attributes:
   - verification_id
   - verification_ts
   - block_id
   - signature
   - owner
   - transaction_ids
   - verification_ids
   - previous_block_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'verification_id', None, None, ), # 1
    (2, TType.STRING, 'verification_ts', None, None, ), # 2
    (3, TType.I32, 'block_id', None, None, ), # 3
    (4, TType.STRUCT, 'signature', (VerificationSignature, VerificationSignature.thrift_spec), None, ), # 4
    (5, TType.STRING, 'owner', None, None, ), # 5
    (6, TType.LIST, 'transaction_ids', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'verification_ids', (TType.STRING,None), None, ), # 7
    (8, TType.STRUCT, 'previous_block_hash', (PriorBlockHash, PriorBlockHash.thrift_spec), None, ), # 8
  )

  def __init__(self, verification_id=None, verification_ts=None, block_id=None, signature=None, owner=None, transaction_ids=None, verification_ids=None, previous_block_hash=None,):
    self.verification_id = verification_id
    self.verification_ts = verification_ts
    self.block_id = block_id
    self.signature = signature
    self.owner = owner
    self.transaction_ids = transaction_ids
    self.verification_ids = verification_ids
    self.previous_block_hash = previous_block_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.verification_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.verification_ts = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.block_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.signature = VerificationSignature()
          self.signature.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.owner = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.transaction_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString()
            self.transaction_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.verification_ids = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString()
            self.verification_ids.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.previous_block_hash = PriorBlockHash()
          self.previous_block_hash.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Verification')
    if self.verification_id is not None:
      oprot.writeFieldBegin('verification_id', TType.STRING, 1)
      oprot.writeString(self.verification_id)
      oprot.writeFieldEnd()
    if self.verification_ts is not None:
      oprot.writeFieldBegin('verification_ts', TType.STRING, 2)
      oprot.writeString(self.verification_ts)
      oprot.writeFieldEnd()
    if self.block_id is not None:
      oprot.writeFieldBegin('block_id', TType.I32, 3)
      oprot.writeI32(self.block_id)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRUCT, 4)
      self.signature.write(oprot)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 5)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.transaction_ids is not None:
      oprot.writeFieldBegin('transaction_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.transaction_ids))
      for iter19 in self.transaction_ids:
        oprot.writeString(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.verification_ids is not None:
      oprot.writeFieldBegin('verification_ids', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.verification_ids))
      for iter20 in self.verification_ids:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.previous_block_hash is not None:
      oprot.writeFieldBegin('previous_block_hash', TType.STRUCT, 8)
      self.previous_block_hash.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.verification_id)
    value = (value * 31) ^ hash(self.verification_ts)
    value = (value * 31) ^ hash(self.block_id)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.transaction_ids)
    value = (value * 31) ^ hash(self.verification_ids)
    value = (value * 31) ^ hash(self.previous_block_hash)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Header:
  """
  Attributes:
   - actor
   - block_id
   - business_unit
   - create_ts
   - creator_id
   - entity
   - family_of_business
   - line_of_business
   - owner
   - status
   - transaction_id
   - transaction_ts
   - transaction_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'actor', None, None, ), # 1
    (2, TType.I32, 'block_id', None, None, ), # 2
    (3, TType.STRING, 'business_unit', None, None, ), # 3
    (4, TType.I32, 'create_ts', None, None, ), # 4
    (5, TType.I32, 'creator_id', None, None, ), # 5
    (6, TType.STRING, 'entity', None, None, ), # 6
    (7, TType.STRING, 'family_of_business', None, None, ), # 7
    (8, TType.STRING, 'line_of_business', None, None, ), # 8
    (9, TType.STRING, 'owner', None, None, ), # 9
    (10, TType.STRING, 'status', None, None, ), # 10
    (11, TType.STRING, 'transaction_id', None, None, ), # 11
    (12, TType.I32, 'transaction_ts', None, None, ), # 12
    (13, TType.STRING, 'transaction_type', None, None, ), # 13
  )

  def __init__(self, actor=None, block_id=None, business_unit=None, create_ts=None, creator_id=None, entity=None, family_of_business=None, line_of_business=None, owner=None, status=None, transaction_id=None, transaction_ts=None, transaction_type=None,):
    self.actor = actor
    self.block_id = block_id
    self.business_unit = business_unit
    self.create_ts = create_ts
    self.creator_id = creator_id
    self.entity = entity
    self.family_of_business = family_of_business
    self.line_of_business = line_of_business
    self.owner = owner
    self.status = status
    self.transaction_id = transaction_id
    self.transaction_ts = transaction_ts
    self.transaction_type = transaction_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.actor = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.block_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.business_unit = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.create_ts = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.creator_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.entity = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.family_of_business = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.line_of_business = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.owner = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.transaction_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.transaction_ts = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.transaction_type = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Header')
    if self.actor is not None:
      oprot.writeFieldBegin('actor', TType.STRING, 1)
      oprot.writeString(self.actor)
      oprot.writeFieldEnd()
    if self.block_id is not None:
      oprot.writeFieldBegin('block_id', TType.I32, 2)
      oprot.writeI32(self.block_id)
      oprot.writeFieldEnd()
    if self.business_unit is not None:
      oprot.writeFieldBegin('business_unit', TType.STRING, 3)
      oprot.writeString(self.business_unit)
      oprot.writeFieldEnd()
    if self.create_ts is not None:
      oprot.writeFieldBegin('create_ts', TType.I32, 4)
      oprot.writeI32(self.create_ts)
      oprot.writeFieldEnd()
    if self.creator_id is not None:
      oprot.writeFieldBegin('creator_id', TType.I32, 5)
      oprot.writeI32(self.creator_id)
      oprot.writeFieldEnd()
    if self.entity is not None:
      oprot.writeFieldBegin('entity', TType.STRING, 6)
      oprot.writeString(self.entity)
      oprot.writeFieldEnd()
    if self.family_of_business is not None:
      oprot.writeFieldBegin('family_of_business', TType.STRING, 7)
      oprot.writeString(self.family_of_business)
      oprot.writeFieldEnd()
    if self.line_of_business is not None:
      oprot.writeFieldBegin('line_of_business', TType.STRING, 8)
      oprot.writeString(self.line_of_business)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 9)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 10)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.transaction_id is not None:
      oprot.writeFieldBegin('transaction_id', TType.STRING, 11)
      oprot.writeString(self.transaction_id)
      oprot.writeFieldEnd()
    if self.transaction_ts is not None:
      oprot.writeFieldBegin('transaction_ts', TType.I32, 12)
      oprot.writeI32(self.transaction_ts)
      oprot.writeFieldEnd()
    if self.transaction_type is not None:
      oprot.writeFieldBegin('transaction_type', TType.STRING, 13)
      oprot.writeString(self.transaction_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.actor)
    value = (value * 31) ^ hash(self.block_id)
    value = (value * 31) ^ hash(self.business_unit)
    value = (value * 31) ^ hash(self.create_ts)
    value = (value * 31) ^ hash(self.creator_id)
    value = (value * 31) ^ hash(self.entity)
    value = (value * 31) ^ hash(self.family_of_business)
    value = (value * 31) ^ hash(self.line_of_business)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.transaction_id)
    value = (value * 31) ^ hash(self.transaction_ts)
    value = (value * 31) ^ hash(self.transaction_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Signature:
  """
  Attributes:
   - signatory
   - hash
   - strip_hash
   - signature
   - public_key
   - signature_ts
   - child_signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'signatory', None, None, ), # 1
    (2, TType.STRING, 'hash', None, None, ), # 2
    (3, TType.STRING, 'strip_hash', None, None, ), # 3
    (4, TType.STRING, 'signature', None, None, ), # 4
    (5, TType.STRING, 'public_key', None, None, ), # 5
    (6, TType.I32, 'signature_ts', None, None, ), # 6
    (7, TType.STRING, 'child_signature', None, None, ), # 7
  )

  def __init__(self, signatory=None, hash=None, strip_hash=None, signature=None, public_key=None, signature_ts=None, child_signature=None,):
    self.signatory = signatory
    self.hash = hash
    self.strip_hash = strip_hash
    self.signature = signature
    self.public_key = public_key
    self.signature_ts = signature_ts
    self.child_signature = child_signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.signatory = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.strip_hash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.signature = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.public_key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.signature_ts = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.child_signature = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Signature')
    if self.signatory is not None:
      oprot.writeFieldBegin('signatory', TType.STRING, 1)
      oprot.writeString(self.signatory)
      oprot.writeFieldEnd()
    if self.hash is not None:
      oprot.writeFieldBegin('hash', TType.STRING, 2)
      oprot.writeString(self.hash)
      oprot.writeFieldEnd()
    if self.strip_hash is not None:
      oprot.writeFieldBegin('strip_hash', TType.STRING, 3)
      oprot.writeString(self.strip_hash)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 4)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.public_key is not None:
      oprot.writeFieldBegin('public_key', TType.STRING, 5)
      oprot.writeString(self.public_key)
      oprot.writeFieldEnd()
    if self.signature_ts is not None:
      oprot.writeFieldBegin('signature_ts', TType.I32, 6)
      oprot.writeI32(self.signature_ts)
      oprot.writeFieldEnd()
    if self.child_signature is not None:
      oprot.writeFieldBegin('child_signature', TType.STRING, 7)
      oprot.writeString(self.child_signature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.signatory)
    value = (value * 31) ^ hash(self.hash)
    value = (value * 31) ^ hash(self.strip_hash)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.public_key)
    value = (value * 31) ^ hash(self.signature_ts)
    value = (value * 31) ^ hash(self.child_signature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Payload:
  """
  Attributes:
   - action
   - swid
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'action', (TType.STRING,None,TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'swid', None, None, ), # 2
  )

  def __init__(self, action=None, swid=None,):
    self.action = action
    self.swid = swid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.action = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin()
          for _i25 in xrange(_size21):
            _key26 = iprot.readString()
            _val27 = iprot.readString()
            self.action[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.swid = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Payload')
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.action))
      for kiter28,viter29 in self.action.items():
        oprot.writeString(kiter28)
        oprot.writeString(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.swid is not None:
      oprot.writeFieldBegin('swid', TType.STRING, 2)
      oprot.writeString(self.swid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.swid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Transaction:
  """
  Attributes:
   - tx_header
   - tx_payload
   - tx_signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'tx_header', (Header, Header.thrift_spec), None, ), # 1
    (2, TType.STRING, 'tx_payload', None, None, ), # 2
    (3, TType.STRUCT, 'tx_signature', (Signature, Signature.thrift_spec), None, ), # 3
  )

  def __init__(self, tx_header=None, tx_payload=None, tx_signature=None,):
    self.tx_header = tx_header
    self.tx_payload = tx_payload
    self.tx_signature = tx_signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.tx_header = Header()
          self.tx_header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tx_payload = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.tx_signature = Signature()
          self.tx_signature.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Transaction')
    if self.tx_header is not None:
      oprot.writeFieldBegin('tx_header', TType.STRUCT, 1)
      self.tx_header.write(oprot)
      oprot.writeFieldEnd()
    if self.tx_payload is not None:
      oprot.writeFieldBegin('tx_payload', TType.STRING, 2)
      oprot.writeString(self.tx_payload)
      oprot.writeFieldEnd()
    if self.tx_signature is not None:
      oprot.writeFieldBegin('tx_signature', TType.STRUCT, 3)
      self.tx_signature.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tx_header)
    value = (value * 31) ^ hash(self.tx_payload)
    value = (value * 31) ^ hash(self.tx_signature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Node:
  """
  Attributes:
   - host
   - port
   - owner
   - node_id
   - phases
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'host', None, None, ), # 1
    (2, TType.I16, 'port', None, None, ), # 2
    (3, TType.STRING, 'owner', None, None, ), # 3
    (4, TType.STRING, 'node_id', None, None, ), # 4
    (5, TType.I32, 'phases', None, None, ), # 5
  )

  def __init__(self, host=None, port=None, owner=None, node_id=None, phases=None,):
    self.host = host
    self.port = port
    self.owner = owner
    self.node_id = node_id
    self.phases = phases

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.host = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.port = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.owner = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.node_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.phases = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Node')
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 1)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I16, 2)
      oprot.writeI16(self.port)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 3)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.node_id is not None:
      oprot.writeFieldBegin('node_id', TType.STRING, 4)
      oprot.writeString(self.node_id)
      oprot.writeFieldEnd()
    if self.phases is not None:
      oprot.writeFieldBegin('phases', TType.I32, 5)
      oprot.writeI32(self.phases)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.node_id)
    value = (value * 31) ^ hash(self.phases)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VerificationRecordCommonInfo:
  """
  Attributes:
   - block_id
   - origin_id
   - phase
   - verification_ts
   - verification_id
   - signature
   - prior_hash
   - lower_hash
   - public_transmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'block_id', None, None, ), # 1
    (2, TType.STRING, 'origin_id', None, None, ), # 2
    (3, TType.I32, 'phase', None, None, ), # 3
    (4, TType.I32, 'verification_ts', None, None, ), # 4
    (5, TType.STRING, 'verification_id', None, None, ), # 5
    (6, TType.STRUCT, 'signature', (Signature, Signature.thrift_spec), None, ), # 6
    (7, TType.STRING, 'prior_hash', None, None, ), # 7
    (8, TType.STRING, 'lower_hash', None, None, ), # 8
    (9, TType.MAP, 'public_transmission', (TType.STRING,None,TType.BOOL,None), None, ), # 9
  )

  def __init__(self, block_id=None, origin_id=None, phase=None, verification_ts=None, verification_id=None, signature=None, prior_hash=None, lower_hash=None, public_transmission=None,):
    self.block_id = block_id
    self.origin_id = origin_id
    self.phase = phase
    self.verification_ts = verification_ts
    self.verification_id = verification_id
    self.signature = signature
    self.prior_hash = prior_hash
    self.lower_hash = lower_hash
    self.public_transmission = public_transmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.block_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.origin_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.phase = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.verification_ts = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.verification_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.signature = Signature()
          self.signature.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.prior_hash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.lower_hash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.public_transmission = {}
          (_ktype31, _vtype32, _size30 ) = iprot.readMapBegin()
          for _i34 in xrange(_size30):
            _key35 = iprot.readString()
            _val36 = iprot.readBool()
            self.public_transmission[_key35] = _val36
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VerificationRecordCommonInfo')
    if self.block_id is not None:
      oprot.writeFieldBegin('block_id', TType.I32, 1)
      oprot.writeI32(self.block_id)
      oprot.writeFieldEnd()
    if self.origin_id is not None:
      oprot.writeFieldBegin('origin_id', TType.STRING, 2)
      oprot.writeString(self.origin_id)
      oprot.writeFieldEnd()
    if self.phase is not None:
      oprot.writeFieldBegin('phase', TType.I32, 3)
      oprot.writeI32(self.phase)
      oprot.writeFieldEnd()
    if self.verification_ts is not None:
      oprot.writeFieldBegin('verification_ts', TType.I32, 4)
      oprot.writeI32(self.verification_ts)
      oprot.writeFieldEnd()
    if self.verification_id is not None:
      oprot.writeFieldBegin('verification_id', TType.STRING, 5)
      oprot.writeString(self.verification_id)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRUCT, 6)
      self.signature.write(oprot)
      oprot.writeFieldEnd()
    if self.prior_hash is not None:
      oprot.writeFieldBegin('prior_hash', TType.STRING, 7)
      oprot.writeString(self.prior_hash)
      oprot.writeFieldEnd()
    if self.lower_hash is not None:
      oprot.writeFieldBegin('lower_hash', TType.STRING, 8)
      oprot.writeString(self.lower_hash)
      oprot.writeFieldEnd()
    if self.public_transmission is not None:
      oprot.writeFieldBegin('public_transmission', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self.public_transmission))
      for kiter37,viter38 in self.public_transmission.items():
        oprot.writeString(kiter37)
        oprot.writeBool(viter38)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.block_id)
    value = (value * 31) ^ hash(self.origin_id)
    value = (value * 31) ^ hash(self.phase)
    value = (value * 31) ^ hash(self.verification_ts)
    value = (value * 31) ^ hash(self.verification_id)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.prior_hash)
    value = (value * 31) ^ hash(self.lower_hash)
    value = (value * 31) ^ hash(self.public_transmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Phase_1_msg:
  """
  Attributes:
   - record
   - transactions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'record', (VerificationRecordCommonInfo, VerificationRecordCommonInfo.thrift_spec), None, ), # 1
    (2, TType.LIST, 'transactions', (TType.STRUCT,(Transaction, Transaction.thrift_spec)), None, ), # 2
  )

  def __init__(self, record=None, transactions=None,):
    self.record = record
    self.transactions = transactions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.record = VerificationRecordCommonInfo()
          self.record.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.transactions = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = Transaction()
            _elem44.read(iprot)
            self.transactions.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Phase_1_msg')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.STRUCT, 1)
      self.record.write(oprot)
      oprot.writeFieldEnd()
    if self.transactions is not None:
      oprot.writeFieldBegin('transactions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.transactions))
      for iter45 in self.transactions:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.transactions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Phase_2_msg:
  """
  Attributes:
   - record
   - valid_txs
   - invalid_txs
   - business
   - deploy_location
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'record', (VerificationRecordCommonInfo, VerificationRecordCommonInfo.thrift_spec), None, ), # 1
    (2, TType.LIST, 'valid_txs', (TType.STRUCT,(Transaction, Transaction.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'invalid_txs', (TType.STRUCT,(Transaction, Transaction.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'business', None, None, ), # 4
    (5, TType.STRING, 'deploy_location', None, None, ), # 5
  )

  def __init__(self, record=None, valid_txs=None, invalid_txs=None, business=None, deploy_location=None,):
    self.record = record
    self.valid_txs = valid_txs
    self.invalid_txs = invalid_txs
    self.business = business
    self.deploy_location = deploy_location

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.record = VerificationRecordCommonInfo()
          self.record.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.valid_txs = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = Transaction()
            _elem51.read(iprot)
            self.valid_txs.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.invalid_txs = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = Transaction()
            _elem57.read(iprot)
            self.invalid_txs.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.business = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.deploy_location = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Phase_2_msg')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.STRUCT, 1)
      self.record.write(oprot)
      oprot.writeFieldEnd()
    if self.valid_txs is not None:
      oprot.writeFieldBegin('valid_txs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.valid_txs))
      for iter58 in self.valid_txs:
        iter58.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invalid_txs is not None:
      oprot.writeFieldBegin('invalid_txs', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.invalid_txs))
      for iter59 in self.invalid_txs:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.business is not None:
      oprot.writeFieldBegin('business', TType.STRING, 4)
      oprot.writeString(self.business)
      oprot.writeFieldEnd()
    if self.deploy_location is not None:
      oprot.writeFieldBegin('deploy_location', TType.STRING, 5)
      oprot.writeString(self.deploy_location)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.valid_txs)
    value = (value * 31) ^ hash(self.invalid_txs)
    value = (value * 31) ^ hash(self.business)
    value = (value * 31) ^ hash(self.deploy_location)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Phase_3_msg:
  """
  Attributes:
   - record
   - lower_hashes
   - p2_count
   - businesses
   - deploy_locations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'record', (VerificationRecordCommonInfo, VerificationRecordCommonInfo.thrift_spec), None, ), # 1
    (2, TType.LIST, 'lower_hashes', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'p2_count', None, None, ), # 3
    (4, TType.LIST, 'businesses', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'deploy_locations', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, record=None, lower_hashes=None, p2_count=None, businesses=None, deploy_locations=None,):
    self.record = record
    self.lower_hashes = lower_hashes
    self.p2_count = p2_count
    self.businesses = businesses
    self.deploy_locations = deploy_locations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.record = VerificationRecordCommonInfo()
          self.record.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.lower_hashes = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = iprot.readString()
            self.lower_hashes.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.p2_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.businesses = []
          (_etype69, _size66) = iprot.readListBegin()
          for _i70 in xrange(_size66):
            _elem71 = iprot.readString()
            self.businesses.append(_elem71)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.deploy_locations = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = iprot.readString()
            self.deploy_locations.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Phase_3_msg')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.STRUCT, 1)
      self.record.write(oprot)
      oprot.writeFieldEnd()
    if self.lower_hashes is not None:
      oprot.writeFieldBegin('lower_hashes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.lower_hashes))
      for iter78 in self.lower_hashes:
        oprot.writeString(iter78)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.p2_count is not None:
      oprot.writeFieldBegin('p2_count', TType.I32, 3)
      oprot.writeI32(self.p2_count)
      oprot.writeFieldEnd()
    if self.businesses is not None:
      oprot.writeFieldBegin('businesses', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.businesses))
      for iter79 in self.businesses:
        oprot.writeString(iter79)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.deploy_locations is not None:
      oprot.writeFieldBegin('deploy_locations', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.deploy_locations))
      for iter80 in self.deploy_locations:
        oprot.writeString(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.lower_hashes)
    value = (value * 31) ^ hash(self.p2_count)
    value = (value * 31) ^ hash(self.businesses)
    value = (value * 31) ^ hash(self.deploy_locations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Phase_4_msg:
  """
  Attributes:
   - record
   - lower_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'record', (VerificationRecordCommonInfo, VerificationRecordCommonInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'lower_hash', None, None, ), # 2
  )

  def __init__(self, record=None, lower_hash=None,):
    self.record = record
    self.lower_hash = lower_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.record = VerificationRecordCommonInfo()
          self.record.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.lower_hash = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Phase_4_msg')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.STRUCT, 1)
      self.record.write(oprot)
      oprot.writeFieldEnd()
    if self.lower_hash is not None:
      oprot.writeFieldBegin('lower_hash', TType.STRING, 2)
      oprot.writeString(self.lower_hash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.lower_hash)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VerificationRecord:
  """
  Attributes:
   - p1
   - p2
   - p3
   - p4
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'p1', (Phase_1_msg, Phase_1_msg.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'p2', (Phase_2_msg, Phase_2_msg.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'p3', (Phase_3_msg, Phase_3_msg.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'p4', (Phase_4_msg, Phase_4_msg.thrift_spec), None, ), # 4
  )

  def __init__(self, p1=None, p2=None, p3=None, p4=None,):
    self.p1 = p1
    self.p2 = p2
    self.p3 = p3
    self.p4 = p4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.p1 = Phase_1_msg()
          self.p1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.p2 = Phase_2_msg()
          self.p2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.p3 = Phase_3_msg()
          self.p3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.p4 = Phase_4_msg()
          self.p4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VerificationRecord')
    if self.p1 is not None:
      oprot.writeFieldBegin('p1', TType.STRUCT, 1)
      self.p1.write(oprot)
      oprot.writeFieldEnd()
    if self.p2 is not None:
      oprot.writeFieldBegin('p2', TType.STRUCT, 2)
      self.p2.write(oprot)
      oprot.writeFieldEnd()
    if self.p3 is not None:
      oprot.writeFieldBegin('p3', TType.STRUCT, 3)
      self.p3.write(oprot)
      oprot.writeFieldEnd()
    if self.p4 is not None:
      oprot.writeFieldBegin('p4', TType.STRUCT, 4)
      self.p4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.p1)
    value = (value * 31) ^ hash(self.p2)
    value = (value * 31) ^ hash(self.p3)
    value = (value * 31) ^ hash(self.p4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Phase_5_request:
  """
  Attributes:
   - verification_record
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'verification_record', (VerificationRecord, VerificationRecord.thrift_spec), None, ), # 1
  )

  def __init__(self, verification_record=None,):
    self.verification_record = verification_record

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.verification_record = VerificationRecord()
          self.verification_record.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Phase_5_request')
    if self.verification_record is not None:
      oprot.writeFieldBegin('verification_record', TType.STRUCT, 1)
      self.verification_record.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.verification_record)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Phase_5_msg:
  """
  Attributes:
   - verification_record
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'verification_record', (VerificationRecord, VerificationRecord.thrift_spec), None, ), # 1
  )

  def __init__(self, verification_record=None,):
    self.verification_record = verification_record

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.verification_record = VerificationRecord()
          self.verification_record.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Phase_5_msg')
    if self.verification_record is not None:
      oprot.writeFieldBegin('verification_record', TType.STRUCT, 1)
      self.verification_record.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.verification_record)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscriptionResponse:
  """
  Attributes:
   - transactions
   - verification_records
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'transactions', (TType.STRUCT,(Transaction, Transaction.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'verification_records', (TType.STRUCT,(VerificationRecord, VerificationRecord.thrift_spec)), None, ), # 2
  )

  def __init__(self, transactions=None, verification_records=None,):
    self.transactions = transactions
    self.verification_records = verification_records

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.transactions = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in xrange(_size81):
            _elem86 = Transaction()
            _elem86.read(iprot)
            self.transactions.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.verification_records = []
          (_etype90, _size87) = iprot.readListBegin()
          for _i91 in xrange(_size87):
            _elem92 = VerificationRecord()
            _elem92.read(iprot)
            self.verification_records.append(_elem92)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscriptionResponse')
    if self.transactions is not None:
      oprot.writeFieldBegin('transactions', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.transactions))
      for iter93 in self.transactions:
        iter93.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.verification_records is not None:
      oprot.writeFieldBegin('verification_records', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.verification_records))
      for iter94 in self.verification_records:
        iter94.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.transactions)
    value = (value * 31) ^ hash(self.verification_records)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnauthorizedException(TException):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnauthorizedException')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
