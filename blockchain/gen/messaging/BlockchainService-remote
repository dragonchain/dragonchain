#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from messaging import BlockchainService
from messaging.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping()')
  print('  Node get_node_info()')
  print('  bool register_node(Node node, string pass_phrase)')
  print('  void unregister_node(string pass_phrase)')
  print('   phase_1_message(Phase_1_msg p1)')
  print('   phase_2_message(Phase_2_msg p2)')
  print('   phase_3_message(Phase_3_msg p3)')
  print('   phase_4_message(Phase_4_msg p4)')
  print('   phase_5_message(Phase_5_msg p5)')
  print('   receipt_request(string pass_phrase)')
  print('   transfer_data(string pass_phrase,  received,  unreceived)')
  print('  void subscription_provisioning(string subscription_id,  criteria, string phase_criteria, i32 create_ts, string public_key)')
  print('  SubscriptionResponse subscription_request(string subscription_id, Signature subscription_signature)')
  print('   get_peers()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = BlockchainService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'get_node_info':
  if len(args) != 0:
    print('get_node_info requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_node_info())

elif cmd == 'register_node':
  if len(args) != 2:
    print('register_node requires 2 args')
    sys.exit(1)
  pp.pprint(client.register_node(eval(args[0]),args[1],))

elif cmd == 'unregister_node':
  if len(args) != 1:
    print('unregister_node requires 1 args')
    sys.exit(1)
  pp.pprint(client.unregister_node(args[0],))

elif cmd == 'phase_1_message':
  if len(args) != 1:
    print('phase_1_message requires 1 args')
    sys.exit(1)
  pp.pprint(client.phase_1_message(eval(args[0]),))

elif cmd == 'phase_2_message':
  if len(args) != 1:
    print('phase_2_message requires 1 args')
    sys.exit(1)
  pp.pprint(client.phase_2_message(eval(args[0]),))

elif cmd == 'phase_3_message':
  if len(args) != 1:
    print('phase_3_message requires 1 args')
    sys.exit(1)
  pp.pprint(client.phase_3_message(eval(args[0]),))

elif cmd == 'phase_4_message':
  if len(args) != 1:
    print('phase_4_message requires 1 args')
    sys.exit(1)
  pp.pprint(client.phase_4_message(eval(args[0]),))

elif cmd == 'phase_5_message':
  if len(args) != 1:
    print('phase_5_message requires 1 args')
    sys.exit(1)
  pp.pprint(client.phase_5_message(eval(args[0]),))

elif cmd == 'receipt_request':
  if len(args) != 1:
    print('receipt_request requires 1 args')
    sys.exit(1)
  pp.pprint(client.receipt_request(args[0],))

elif cmd == 'transfer_data':
  if len(args) != 3:
    print('transfer_data requires 3 args')
    sys.exit(1)
  pp.pprint(client.transfer_data(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'subscription_provisioning':
  if len(args) != 5:
    print('subscription_provisioning requires 5 args')
    sys.exit(1)
  pp.pprint(client.subscription_provisioning(args[0],eval(args[1]),args[2],eval(args[3]),args[4],))

elif cmd == 'subscription_request':
  if len(args) != 2:
    print('subscription_request requires 2 args')
    sys.exit(1)
  pp.pprint(client.subscription_request(args[0],eval(args[1]),))

elif cmd == 'get_peers':
  if len(args) != 0:
    print('get_peers requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_peers())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
