#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from messaging import BlockchainService
from messaging.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping(string pass_phrase)')
  print('  Node get_node_info()')
  print('  bool register_node(Node node, string pass_phrase)')
  print('  void unregister_node(string pass_phrase)')
  print('  void submit_verifications( verifications,  origins, string pass_phrase)')
  print('  void submit_transactions( transactions,  origins, string pass_phrase)')
  print('   get_peers(string pass_phrase)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = BlockchainService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 1:
    print('ping requires 1 args')
    sys.exit(1)
  pp.pprint(client.ping(args[0],))

elif cmd == 'get_node_info':
  if len(args) != 0:
    print('get_node_info requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_node_info())

elif cmd == 'register_node':
  if len(args) != 2:
    print('register_node requires 2 args')
    sys.exit(1)
  pp.pprint(client.register_node(eval(args[0]),args[1],))

elif cmd == 'unregister_node':
  if len(args) != 1:
    print('unregister_node requires 1 args')
    sys.exit(1)
  pp.pprint(client.unregister_node(args[0],))

elif cmd == 'submit_verifications':
  if len(args) != 3:
    print('submit_verifications requires 3 args')
    sys.exit(1)
  pp.pprint(client.submit_verifications(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'submit_transactions':
  if len(args) != 3:
    print('submit_transactions requires 3 args')
    sys.exit(1)
  pp.pprint(client.submit_transactions(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'get_peers':
  if len(args) != 1:
    print('get_peers requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_peers(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
