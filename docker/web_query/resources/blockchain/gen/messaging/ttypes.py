#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Status:
  NEW = 1
  PENDING = 2
  APPROVED = 3
  COMPLETE = 4

  _VALUES_TO_NAMES = {
    1: "NEW",
    2: "PENDING",
    3: "APPROVED",
    4: "COMPLETE",
  }

  _NAMES_TO_VALUES = {
    "NEW": 1,
    "PENDING": 2,
    "APPROVED": 3,
    "COMPLETE": 4,
  }


class VerificationSignature:
  """
  Attributes:
   - signature
   - signing_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'signature', None, None, ), # 1
    (2, TType.STRING, 'signing_hash', None, None, ), # 2
  )

  def __init__(self, signature=None, signing_hash=None,):
    self.signature = signature
    self.signing_hash = signing_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.signing_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VerificationSignature')
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 1)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.signing_hash is not None:
      oprot.writeFieldBegin('signing_hash', TType.STRING, 2)
      oprot.writeString(self.signing_hash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.signing_hash)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriorBlockHash:
  """
  Attributes:
   - hash
   - verification_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hash', None, None, ), # 1
    (2, TType.LIST, 'verification_ids', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, hash=None, verification_ids=None,):
    self.hash = hash
    self.verification_ids = verification_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.verification_ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.verification_ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriorBlockHash')
    if self.hash is not None:
      oprot.writeFieldBegin('hash', TType.STRING, 1)
      oprot.writeString(self.hash)
      oprot.writeFieldEnd()
    if self.verification_ids is not None:
      oprot.writeFieldBegin('verification_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.verification_ids))
      for iter6 in self.verification_ids:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hash)
    value = (value * 31) ^ hash(self.verification_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Verification:
  """
  Attributes:
   - verification_id
   - verified_ts
   - block_id
   - signature
   - owner
   - transaction_ids
   - verification_ids
   - previous_block_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'verification_id', None, None, ), # 1
    (2, TType.STRING, 'verified_ts', None, None, ), # 2
    (3, TType.I32, 'block_id', None, None, ), # 3
    (4, TType.STRUCT, 'signature', (VerificationSignature, VerificationSignature.thrift_spec), None, ), # 4
    (5, TType.STRING, 'owner', None, None, ), # 5
    (6, TType.LIST, 'transaction_ids', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'verification_ids', (TType.STRING,None), None, ), # 7
    (8, TType.STRUCT, 'previous_block_hash', (PriorBlockHash, PriorBlockHash.thrift_spec), None, ), # 8
  )

  def __init__(self, verification_id=None, verified_ts=None, block_id=None, signature=None, owner=None, transaction_ids=None, verification_ids=None, previous_block_hash=None,):
    self.verification_id = verification_id
    self.verified_ts = verified_ts
    self.block_id = block_id
    self.signature = signature
    self.owner = owner
    self.transaction_ids = transaction_ids
    self.verification_ids = verification_ids
    self.previous_block_hash = previous_block_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.verification_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.verified_ts = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.block_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.signature = VerificationSignature()
          self.signature.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.owner = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.transaction_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.transaction_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.verification_ids = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString();
            self.verification_ids.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.previous_block_hash = PriorBlockHash()
          self.previous_block_hash.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Verification')
    if self.verification_id is not None:
      oprot.writeFieldBegin('verification_id', TType.STRING, 1)
      oprot.writeString(self.verification_id)
      oprot.writeFieldEnd()
    if self.verified_ts is not None:
      oprot.writeFieldBegin('verified_ts', TType.STRING, 2)
      oprot.writeString(self.verified_ts)
      oprot.writeFieldEnd()
    if self.block_id is not None:
      oprot.writeFieldBegin('block_id', TType.I32, 3)
      oprot.writeI32(self.block_id)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRUCT, 4)
      self.signature.write(oprot)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 5)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.transaction_ids is not None:
      oprot.writeFieldBegin('transaction_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.transaction_ids))
      for iter19 in self.transaction_ids:
        oprot.writeString(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.verification_ids is not None:
      oprot.writeFieldBegin('verification_ids', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.verification_ids))
      for iter20 in self.verification_ids:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.previous_block_hash is not None:
      oprot.writeFieldBegin('previous_block_hash', TType.STRUCT, 8)
      self.previous_block_hash.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.verification_id)
    value = (value * 31) ^ hash(self.verified_ts)
    value = (value * 31) ^ hash(self.block_id)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.transaction_ids)
    value = (value * 31) ^ hash(self.verification_ids)
    value = (value * 31) ^ hash(self.previous_block_hash)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransactionSignature:
  """
  Attributes:
   - name
   - hash
   - digest
   - public_key
   - signature_ts
   - signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'hash', None, None, ), # 2
    (3, TType.STRING, 'digest', None, None, ), # 3
    (4, TType.STRING, 'public_key', None, None, ), # 4
    (5, TType.STRING, 'signature_ts', None, None, ), # 5
    (6, TType.STRING, 'signature', None, None, ), # 6
  )

  def __init__(self, name=None, hash=None, digest=None, public_key=None, signature_ts=None, signature=None,):
    self.name = name
    self.hash = hash
    self.digest = digest
    self.public_key = public_key
    self.signature_ts = signature_ts
    self.signature = signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.digest = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.public_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.signature_ts = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransactionSignature')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.hash is not None:
      oprot.writeFieldBegin('hash', TType.STRING, 2)
      oprot.writeString(self.hash)
      oprot.writeFieldEnd()
    if self.digest is not None:
      oprot.writeFieldBegin('digest', TType.STRING, 3)
      oprot.writeString(self.digest)
      oprot.writeFieldEnd()
    if self.public_key is not None:
      oprot.writeFieldBegin('public_key', TType.STRING, 4)
      oprot.writeString(self.public_key)
      oprot.writeFieldEnd()
    if self.signature_ts is not None:
      oprot.writeFieldBegin('signature_ts', TType.STRING, 5)
      oprot.writeString(self.signature_ts)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 6)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.hash)
    value = (value * 31) ^ hash(self.digest)
    value = (value * 31) ^ hash(self.public_key)
    value = (value * 31) ^ hash(self.signature_ts)
    value = (value * 31) ^ hash(self.signature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Transaction:
  """
  Attributes:
   - id
   - time
   - business_unit
   - family_of_business
   - line_of_business
   - payload
   - signature
   - owner
   - creator_id
   - type
   - block_id
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'time', None, None, ), # 2
    (3, TType.STRING, 'business_unit', None, None, ), # 3
    (4, TType.STRING, 'family_of_business', None, None, ), # 4
    (5, TType.STRING, 'line_of_business', None, None, ), # 5
    (6, TType.STRING, 'payload', None, None, ), # 6
    (7, TType.STRUCT, 'signature', (TransactionSignature, TransactionSignature.thrift_spec), None, ), # 7
    (8, TType.STRING, 'owner', None, None, ), # 8
    (9, TType.STRING, 'creator_id', None, None, ), # 9
    (10, TType.STRING, 'type', None, None, ), # 10
    (11, TType.I32, 'block_id', None, None, ), # 11
    (12, TType.I32, 'status', None, None, ), # 12
  )

  def __init__(self, id=None, time=None, business_unit=None, family_of_business=None, line_of_business=None, payload=None, signature=None, owner=None, creator_id=None, type=None, block_id=None, status=None,):
    self.id = id
    self.time = time
    self.business_unit = business_unit
    self.family_of_business = family_of_business
    self.line_of_business = line_of_business
    self.payload = payload
    self.signature = signature
    self.owner = owner
    self.creator_id = creator_id
    self.type = type
    self.block_id = block_id
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.business_unit = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.family_of_business = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.line_of_business = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.payload = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.signature = TransactionSignature()
          self.signature.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.owner = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.creator_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.block_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Transaction')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.STRING, 2)
      oprot.writeString(self.time)
      oprot.writeFieldEnd()
    if self.business_unit is not None:
      oprot.writeFieldBegin('business_unit', TType.STRING, 3)
      oprot.writeString(self.business_unit)
      oprot.writeFieldEnd()
    if self.family_of_business is not None:
      oprot.writeFieldBegin('family_of_business', TType.STRING, 4)
      oprot.writeString(self.family_of_business)
      oprot.writeFieldEnd()
    if self.line_of_business is not None:
      oprot.writeFieldBegin('line_of_business', TType.STRING, 5)
      oprot.writeString(self.line_of_business)
      oprot.writeFieldEnd()
    if self.payload is not None:
      oprot.writeFieldBegin('payload', TType.STRING, 6)
      oprot.writeString(self.payload)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRUCT, 7)
      self.signature.write(oprot)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 8)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.creator_id is not None:
      oprot.writeFieldBegin('creator_id', TType.STRING, 9)
      oprot.writeString(self.creator_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 10)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.block_id is not None:
      oprot.writeFieldBegin('block_id', TType.I32, 11)
      oprot.writeI32(self.block_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 12)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.time)
    value = (value * 31) ^ hash(self.business_unit)
    value = (value * 31) ^ hash(self.family_of_business)
    value = (value * 31) ^ hash(self.line_of_business)
    value = (value * 31) ^ hash(self.payload)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.creator_id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.block_id)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Node:
  """
  Attributes:
   - host
   - port
   - owner
   - node_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'host', None, None, ), # 1
    (2, TType.I16, 'port', None, None, ), # 2
    (3, TType.STRING, 'owner', None, None, ), # 3
    (4, TType.STRING, 'node_id', None, None, ), # 4
  )

  def __init__(self, host=None, port=None, owner=None, node_id=None,):
    self.host = host
    self.port = port
    self.owner = owner
    self.node_id = node_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.port = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.owner = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.node_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Node')
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 1)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I16, 2)
      oprot.writeI16(self.port)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 3)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.node_id is not None:
      oprot.writeFieldBegin('node_id', TType.STRING, 4)
      oprot.writeString(self.node_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host)
    value = (value * 31) ^ hash(self.port)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.node_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnauthorizedException(TException):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnauthorizedException')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
