#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def ping(self, pass_phrase):
    """
    Parameters:
     - pass_phrase
    """
    pass

  def get_node_info(self):
    pass

  def register_node(self, node, pass_phrase):
    """
    Parameters:
     - node
     - pass_phrase
    """
    pass

  def unregister_node(self, pass_phrase):
    """
    Parameters:
     - pass_phrase
    """
    pass

  def submit_verifications(self, verifications, origins, pass_phrase):
    """
    Parameters:
     - verifications
     - origins
     - pass_phrase
    """
    pass

  def submit_transactions(self, transactions, origins, pass_phrase):
    """
    Parameters:
     - transactions
     - origins
     - pass_phrase
    """
    pass

  def get_peers(self, pass_phrase):
    """
    Parameters:
     - pass_phrase
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def ping(self, pass_phrase):
    """
    Parameters:
     - pass_phrase
    """
    self.send_ping(pass_phrase)
    self.recv_ping()

  def send_ping(self, pass_phrase):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.pass_phrase = pass_phrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return

  def get_node_info(self):
    self.send_get_node_info()
    return self.recv_get_node_info()

  def send_get_node_info(self):
    self._oprot.writeMessageBegin('get_node_info', TMessageType.CALL, self._seqid)
    args = get_node_info_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_node_info(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = get_node_info_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.unauthorized is not None:
      raise result.unauthorized
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node_info failed: unknown result");

  def register_node(self, node, pass_phrase):
    """
    Parameters:
     - node
     - pass_phrase
    """
    self.send_register_node(node, pass_phrase)
    return self.recv_register_node()

  def send_register_node(self, node, pass_phrase):
    self._oprot.writeMessageBegin('register_node', TMessageType.CALL, self._seqid)
    args = register_node_args()
    args.node = node
    args.pass_phrase = pass_phrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_register_node(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = register_node_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.unauthorized is not None:
      raise result.unauthorized
    raise TApplicationException(TApplicationException.MISSING_RESULT, "register_node failed: unknown result");

  def unregister_node(self, pass_phrase):
    """
    Parameters:
     - pass_phrase
    """
    self.send_unregister_node(pass_phrase)

  def send_unregister_node(self, pass_phrase):
    self._oprot.writeMessageBegin('unregister_node', TMessageType.ONEWAY, self._seqid)
    args = unregister_node_args()
    args.pass_phrase = pass_phrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def submit_verifications(self, verifications, origins, pass_phrase):
    """
    Parameters:
     - verifications
     - origins
     - pass_phrase
    """
    self.send_submit_verifications(verifications, origins, pass_phrase)
    self.recv_submit_verifications()

  def send_submit_verifications(self, verifications, origins, pass_phrase):
    self._oprot.writeMessageBegin('submit_verifications', TMessageType.CALL, self._seqid)
    args = submit_verifications_args()
    args.verifications = verifications
    args.origins = origins
    args.pass_phrase = pass_phrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_submit_verifications(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = submit_verifications_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.unauthorized is not None:
      raise result.unauthorized
    return

  def submit_transactions(self, transactions, origins, pass_phrase):
    """
    Parameters:
     - transactions
     - origins
     - pass_phrase
    """
    self.send_submit_transactions(transactions, origins, pass_phrase)
    self.recv_submit_transactions()

  def send_submit_transactions(self, transactions, origins, pass_phrase):
    self._oprot.writeMessageBegin('submit_transactions', TMessageType.CALL, self._seqid)
    args = submit_transactions_args()
    args.transactions = transactions
    args.origins = origins
    args.pass_phrase = pass_phrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_submit_transactions(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = submit_transactions_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.unauthorized is not None:
      raise result.unauthorized
    return

  def get_peers(self, pass_phrase):
    """
    Parameters:
     - pass_phrase
    """
    self.send_get_peers(pass_phrase)
    return self.recv_get_peers()

  def send_get_peers(self, pass_phrase):
    self._oprot.writeMessageBegin('get_peers', TMessageType.CALL, self._seqid)
    args = get_peers_args()
    args.pass_phrase = pass_phrase
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_peers(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = get_peers_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.unauthorized is not None:
      raise result.unauthorized
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_peers failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["get_node_info"] = Processor.process_get_node_info
    self._processMap["register_node"] = Processor.process_register_node
    self._processMap["unregister_node"] = Processor.process_unregister_node
    self._processMap["submit_verifications"] = Processor.process_submit_verifications
    self._processMap["submit_transactions"] = Processor.process_submit_transactions
    self._processMap["get_peers"] = Processor.process_get_peers

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    self._handler.ping(args.pass_phrase)
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_node_info(self, seqid, iprot, oprot):
    args = get_node_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_node_info_result()
    try:
      result.success = self._handler.get_node_info()
    except UnauthorizedException, unauthorized:
      result.unauthorized = unauthorized
    oprot.writeMessageBegin("get_node_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_register_node(self, seqid, iprot, oprot):
    args = register_node_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = register_node_result()
    try:
      result.success = self._handler.register_node(args.node, args.pass_phrase)
    except UnauthorizedException, unauthorized:
      result.unauthorized = unauthorized
    oprot.writeMessageBegin("register_node", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unregister_node(self, seqid, iprot, oprot):
    args = unregister_node_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.unregister_node(args.pass_phrase)
    return

  def process_submit_verifications(self, seqid, iprot, oprot):
    args = submit_verifications_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = submit_verifications_result()
    try:
      self._handler.submit_verifications(args.verifications, args.origins, args.pass_phrase)
    except UnauthorizedException, unauthorized:
      result.unauthorized = unauthorized
    oprot.writeMessageBegin("submit_verifications", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_submit_transactions(self, seqid, iprot, oprot):
    args = submit_transactions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = submit_transactions_result()
    try:
      self._handler.submit_transactions(args.transactions, args.origins, args.pass_phrase)
    except UnauthorizedException, unauthorized:
      result.unauthorized = unauthorized
    oprot.writeMessageBegin("submit_transactions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_peers(self, seqid, iprot, oprot):
    args = get_peers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_peers_result()
    try:
      result.success = self._handler.get_peers(args.pass_phrase)
    except UnauthorizedException, unauthorized:
      result.unauthorized = unauthorized
    oprot.writeMessageBegin("get_peers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class ping_args:
  """
  Attributes:
   - pass_phrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pass_phrase', None, None, ), # 1
  )

  def __init__(self, pass_phrase=None,):
    self.pass_phrase = pass_phrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pass_phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    if self.pass_phrase is not None:
      oprot.writeFieldBegin('pass_phrase', TType.STRING, 1)
      oprot.writeString(self.pass_phrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pass_phrase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_node_info_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_node_info_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_node_info_result:
  """
  Attributes:
   - success
   - unauthorized
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Node, Node.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'unauthorized', (UnauthorizedException, UnauthorizedException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, unauthorized=None,):
    self.success = success
    self.unauthorized = unauthorized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Node()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.unauthorized = UnauthorizedException()
          self.unauthorized.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_node_info_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.unauthorized is not None:
      oprot.writeFieldBegin('unauthorized', TType.STRUCT, 1)
      self.unauthorized.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.unauthorized)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_node_args:
  """
  Attributes:
   - node
   - pass_phrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 1
    (2, TType.STRING, 'pass_phrase', None, None, ), # 2
  )

  def __init__(self, node=None, pass_phrase=None,):
    self.node = node
    self.pass_phrase = pass_phrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pass_phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_node_args')
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 1)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    if self.pass_phrase is not None:
      oprot.writeFieldBegin('pass_phrase', TType.STRING, 2)
      oprot.writeString(self.pass_phrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.node)
    value = (value * 31) ^ hash(self.pass_phrase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_node_result:
  """
  Attributes:
   - success
   - unauthorized
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'unauthorized', (UnauthorizedException, UnauthorizedException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, unauthorized=None,):
    self.success = success
    self.unauthorized = unauthorized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.unauthorized = UnauthorizedException()
          self.unauthorized.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_node_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.unauthorized is not None:
      oprot.writeFieldBegin('unauthorized', TType.STRUCT, 1)
      self.unauthorized.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.unauthorized)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unregister_node_args:
  """
  Attributes:
   - pass_phrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pass_phrase', None, None, ), # 1
  )

  def __init__(self, pass_phrase=None,):
    self.pass_phrase = pass_phrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pass_phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unregister_node_args')
    if self.pass_phrase is not None:
      oprot.writeFieldBegin('pass_phrase', TType.STRING, 1)
      oprot.writeString(self.pass_phrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pass_phrase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class submit_verifications_args:
  """
  Attributes:
   - verifications
   - origins
   - pass_phrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'verifications', (TType.STRUCT,(Verification, Verification.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'origins', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'pass_phrase', None, None, ), # 3
  )

  def __init__(self, verifications=None, origins=None, pass_phrase=None,):
    self.verifications = verifications
    self.origins = origins
    self.pass_phrase = pass_phrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.verifications = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Verification()
            _elem26.read(iprot)
            self.verifications.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.origins = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString();
            self.origins.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.pass_phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('submit_verifications_args')
    if self.verifications is not None:
      oprot.writeFieldBegin('verifications', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.verifications))
      for iter33 in self.verifications:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.origins is not None:
      oprot.writeFieldBegin('origins', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.origins))
      for iter34 in self.origins:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pass_phrase is not None:
      oprot.writeFieldBegin('pass_phrase', TType.STRING, 3)
      oprot.writeString(self.pass_phrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.verifications)
    value = (value * 31) ^ hash(self.origins)
    value = (value * 31) ^ hash(self.pass_phrase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class submit_verifications_result:
  """
  Attributes:
   - unauthorized
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'unauthorized', (UnauthorizedException, UnauthorizedException.thrift_spec), None, ), # 1
  )

  def __init__(self, unauthorized=None,):
    self.unauthorized = unauthorized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.unauthorized = UnauthorizedException()
          self.unauthorized.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('submit_verifications_result')
    if self.unauthorized is not None:
      oprot.writeFieldBegin('unauthorized', TType.STRUCT, 1)
      self.unauthorized.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.unauthorized)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class submit_transactions_args:
  """
  Attributes:
   - transactions
   - origins
   - pass_phrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'transactions', (TType.STRUCT,(Transaction, Transaction.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'origins', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'pass_phrase', None, None, ), # 3
  )

  def __init__(self, transactions=None, origins=None, pass_phrase=None,):
    self.transactions = transactions
    self.origins = origins
    self.pass_phrase = pass_phrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.transactions = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = Transaction()
            _elem40.read(iprot)
            self.transactions.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.origins = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readString();
            self.origins.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.pass_phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('submit_transactions_args')
    if self.transactions is not None:
      oprot.writeFieldBegin('transactions', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.transactions))
      for iter47 in self.transactions:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.origins is not None:
      oprot.writeFieldBegin('origins', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.origins))
      for iter48 in self.origins:
        oprot.writeString(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pass_phrase is not None:
      oprot.writeFieldBegin('pass_phrase', TType.STRING, 3)
      oprot.writeString(self.pass_phrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.transactions)
    value = (value * 31) ^ hash(self.origins)
    value = (value * 31) ^ hash(self.pass_phrase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class submit_transactions_result:
  """
  Attributes:
   - unauthorized
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'unauthorized', (UnauthorizedException, UnauthorizedException.thrift_spec), None, ), # 1
  )

  def __init__(self, unauthorized=None,):
    self.unauthorized = unauthorized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.unauthorized = UnauthorizedException()
          self.unauthorized.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('submit_transactions_result')
    if self.unauthorized is not None:
      oprot.writeFieldBegin('unauthorized', TType.STRUCT, 1)
      self.unauthorized.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.unauthorized)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_peers_args:
  """
  Attributes:
   - pass_phrase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pass_phrase', None, None, ), # 1
  )

  def __init__(self, pass_phrase=None,):
    self.pass_phrase = pass_phrase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pass_phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_peers_args')
    if self.pass_phrase is not None:
      oprot.writeFieldBegin('pass_phrase', TType.STRING, 1)
      oprot.writeString(self.pass_phrase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pass_phrase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_peers_result:
  """
  Attributes:
   - success
   - unauthorized
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'unauthorized', (UnauthorizedException, UnauthorizedException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, unauthorized=None,):
    self.success = success
    self.unauthorized = unauthorized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = Node()
            _elem54.read(iprot)
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.unauthorized = UnauthorizedException()
          self.unauthorized.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_peers_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter55 in self.success:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.unauthorized is not None:
      oprot.writeFieldBegin('unauthorized', TType.STRUCT, 1)
      self.unauthorized.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.unauthorized)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
