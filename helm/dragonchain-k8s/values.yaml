webserverLiveliness: true

ingressEndpoint: api.minikube.com

global:
  environment:
    DRAGONCHAIN_NAME: "ArbitraryName" # This can be anything
    REGISTRATION_TOKEN: "" # Use token from Dragon Net Registration (or arbitrary string if no Dragon Net)
    INTERNAL_ID: "" # Use id from Dragon Net registration (or arbitrary string if no Dragon Net)
    DRAGONCHAIN_ENDPOINT: "https://my-chain.api.company.org:443" # publicly accessible endpoint for this chain. MUST be able to be hit from the internet
    # If using a simple single node cluster like minikube, and the service values below are left as NodePort with port 30000, this would simply be 'http://public.ip.of.minikube.node:30000'
    # Remember to switch the protocol http:// or https:// depending on if you have enabled TLS support or not. (This can be any arbitrary string if no Dragon Net)
    LEVEL: "2" # Integer 1-5 as a string. Must match with Dragon Net registration if participating in Dragon Net
    TLS_SUPPORT: "" # Put "true" here if you have created a TLS certificate and put into a tls kubernetes secret, otherwise leave empty
    LOG_LEVEL: "debug"
    BROADCAST: "false" # Set to "false" if you want to disable Dragon Net support (L1 only)
    USE_ELASTICSEARCH: "false"
    BROADCAST_INTERVAL: "2" # L5 ONLY! Number of hours between broadcasts to public chain
    STAGE: "prod"
    STORAGE_LOCATION: "/dragonchain"
    ELASTICSEARCH_ENDPOINT: "search-elasticsearch-staging-jkouwj4ih5znwtnsgsh7iitmk4.us-west-1.es.amazonaws.com"

service:
  # If using ingress, this should remain ClusterIP, if exposing via the cluster directly, this should be NodePort
  type: ClusterIP
  # Port is only needed if type is "NodePort", and exposing a chain without ingress. Must be 30000-32767 and unique per cluster
#  port: 30000

# User/Group to use when running container.
runContainerUser: 1000
runContainerGroup: 1000

# Mountpath location for secret storage.
secret:
  name: SecretString
  mountPath: /etc/chain-secrets

aws:
  access_key_id: ""
  secret_key: ""

# LRU cache redis resources configuration
cacheredis:
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 15m
      memory: 100Mi

# Persistent redis resources configuration
persistentredis:
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 15m
      memory: 100Mi

# Redisearch resources configuration
redisearch:
  resources:
    limits:
      cpu: 500m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 300Mi
  image:
    repository: docker.io/redislabs/redisearch
    tag: 1.6.13
  storage:
    spec:
      storageClassName: standard
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

# Webserver configuration
webserver:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 200m
      memory: 256Mi

# Transaction processor configuration
transactionProcessor:
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 40m
      memory: 128Mi

# Contract invoker configuration
contractInvoker:
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 20m
      memory: 128Mi

# Broadcast processor configuration
broadcastProcessor:
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 20m
      memory: 128Mi

# Scheduler configuration
scheduler:
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 64Mi
    requests:
      cpu: 20m
      memory: 64Mi

# Scheduler configuration
jobProcessor:
  replicaCount: 1
  resources:
    limits:
      cpu: 50m
      memory: 64Mi
    requests:
      cpu: 20m
      memory: 64Mi

isMinikube: true

faas:
  gateway: ""
  mountFaasSecret: false
  registry: 381978683274.dkr.ecr.us-west-1.amazonaws.com
  registry_username: ""

dragonchain:
  verificationNotification: false
  reporting_type: storage
  pullCreds: awsecr-cred
  image:
    pullPolicy: Always
    value: 381978683274.dkr.ecr.us-west-1.amazonaws.com/dragonchain_core
    version: elastic
  storage:
    spec:
      storageClassName: standard
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi

redis:
  image:
    repository: docker.io/redis
    tag: 6.0.5-alpine
  storage:
    spec:
      storageClassName: standard
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
